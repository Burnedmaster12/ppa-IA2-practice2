gcc -g p3original.c;
./a.out
enter the number
4
the number is composite./a.out
enter the number
7
the number is not composite.
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a.out...done.
(gdb) b main
Breakpoint 1 at 0x83a: file p2final.c, line 29.
(gdb) r
Starting program: /home/runner/IA2-Test1-Session2-2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p2final.c:29
29    n=input_number();
(gdb) s
input_number () at p2final.c:2
2   int input_number(){
(gdb) s
4     printf("enter the number\n");
(gdb) n
enter the number
5     scanf("%d",&n);
(gdb) n
8
6     return n;
(gdb) n
7   }
(gdb) n
main () at p2final.c:30
30    count=is_composite(n);
(gdb) s
is_composite (n=8) at p2final.c:9
9     int count=0;
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
12          count+=1;
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
12          count+=1;
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
12          count+=1;
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
12          count+=1;
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
15    return count;
(gdb) n
 gcc -g p0final.c;
 gdb ./a.out;
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a.out...done.
(gdb) b main
Breakpoint 1 at 0x83a: file p0final.c, line 18.
(gdb) quit
 gcc -g p2final.c;
 ./a.out
enter the number
8
the number is composite 
 gdb ./a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a.out...done.
(gdb) b main
Breakpoint 1 at 0x83a: file p2final.c, line 29.
(gdb) r
Starting program: /home/runner/IA2-Test1-Session2-2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p2final.c:29
29    n=input_number();
(gdb) s
input_number () at p2final.c:2
2   int input_number(){
(gdb) s
4     printf("enter the number\n");
(gdb) n
enter the number
5     scanf("%d",&n);
(gdb) n
8
6     return n;
(gdb) n
7   }
(gdb) n
main () at p2final.c:30
30    count=is_composite(n);
(gdb) s
is_composite (n=8) at p2final.c:9
9     int count=0;
(gdb) s
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
12          count+=1;
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
12          count+=1;
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
12          count+=1;
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
11      if(n%i==0){
(gdb) n
12          count+=1;
(gdb) n
10    for(int i=1;i<=n;i++){
(gdb) n
15    return count;
(gdb) n
16  }
(gdb) n
main () at p2final.c:31
31    output(n,count);
(gdb) s
output (n=8, count=4) at p2final.c:18
18    if(count>2){
(gdb) n
19      printf("the number is composite");
(gdb) n
25  }
(gdb) n
main () at p2final.c:32
32  }(gdb) n
__libc_start_main (main=0x562565200832 <main>, argc=1, argv=0x7ffe90a90e58, 
    init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, 
    stack_end=0x7ffe90a90e48) at ../csu/libc-start.c:344
344 ../csu/libc-start.c: No such file or directory.
(gdb) continue
Continuing.
the number is composite[Inferior 1 (process 752) exited normally]
(gdb) p
The history is empty.
(gdb) l
339 in ../csu/libc-start.c